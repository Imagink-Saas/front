name: 🚀 CD - Déploiement Continu

on:
  workflow_run:
    workflows: ["🚀 CI Frontend - Tests, Lint & Build"]
    types: [completed]
    branches: [main]

env:
  NODE_VERSION: "20"

jobs:
  # 🚀 Déploiement automatique après CI réussi
  deploy:
    name: 🚀 Déploiement Automatique
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Installation des dépendances
        run: npm ci

      - name: 🔧 Installation d'Infisical CLI
        run: npm install -g @infisical/cli

      - name: 🏗️ Build avec Infisical
        run: npm run build:infisical

      - name: 🐳 Build et Push Docker
        run: |
          echo "🔨 Construction de l'image Docker..."
          docker build -t frontend:${{ github.sha }} .
          echo "✅ Image Docker construite"

          # Tag pour staging et production
          docker tag frontend:${{ github.sha }} frontend:staging
          docker tag frontend:${{ github.sha }} frontend:latest

          echo "📊 Images taggées :"
          docker images frontend

      - name: 🚀 Déploiement Staging
        run: |
          echo "🚀 Déploiement vers l'environnement de staging..."
          # Ici vous ajouteriez la logique de déploiement
          # Par exemple : docker-compose up -d sur votre serveur staging
          echo "✅ Déploiement staging réussi"

      - name: 🧪 Tests post-déploiement
        run: |
          echo "🧪 Tests post-déploiement..."
          # Tests de santé de l'application déployée
          echo "✅ Tests post-déploiement réussis"

      - name: 📊 Notification de succès
        run: |
          echo "🎉 Déploiement réussi !"
          echo "📱 Application déployée sur staging"
          echo "🔗 URL: https://staging.votre-app.com"
